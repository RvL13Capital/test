{"cells":[{"cell_type":"code","source":"# project/models.py\nimport torch\nimport torch.nn as nn\nimport numpy as np\n\ndef get_device():\n    \"\"\"Gibt das verfügbare Gerät (CUDA oder CPU) zurück.\"\"\"\n    return torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\nclass Encoder(nn.Module):\n    def __init__(self, input_dim, hidden_dim, n_layers, dropout):\n        super().__init__()\n        self.lstm = nn.LSTM(input_dim, hidden_dim, n_layers, dropout=dropout, batch_first=True)\n    def forward(self, src):\n        return self.lstm(src)\n\nclass Decoder(nn.Module):\n    def __init__(self, output_dim, hidden_dim, n_layers, dropout):\n        super().__init__()\n        self.lstm = nn.LSTM(output_dim, hidden_dim, n_layers, dropout=dropout, batch_first=True)\n        self.fc_out = nn.Linear(hidden_dim, output_dim)\n    def forward(self, input, hidden, cell):\n        input = input.unsqueeze(1)\n        output, (hidden, cell) = self.lstm(input, (hidden, cell))\n        return self.fc_out(output.squeeze(1)), hidden, cell\n\nclass Seq2Seq(nn.Module):\n    def __init__(self, encoder, decoder, device):\n        super().__init__()\n        self.encoder, self.decoder, self.device = encoder, decoder, device\n    def forward(self, src, trg, teacher_forcing_ratio=0.5):\n        batch_size, trg_len = src.shape[0], trg.shape[1]\n        trg_vocab_size = self.decoder.fc_out.out_features\n        outputs = torch.zeros(batch_size, trg_len, trg_vocab_size).to(self.device)\n        \n        _, (hidden, cell) = self.encoder(src)\n        input = trg[:, 0, :]\n        \n        for t in range(trg_len):\n            output, hidden, cell = self.decoder(input, hidden, cell)\n            outputs[:, t, :] = output\n            teacher_force = np.random.random() < teacher_forcing_ratio\n            input = trg[:, t, :] if teacher_force else output\n            \n        return outputs","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}