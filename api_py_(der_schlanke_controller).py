# -*- coding: utf-8 -*-
"""api.py (Der schlanke Controller)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZcymHwLDCSS7--4gR_ila1oEx7zbfIMK
"""

# api.py
# Stellt die Flask-API bereit, die als Schnittstelle zum Celery-System dient.

import os
from flask import Flask, jsonify, request
from flask_cors import CORS
from tasks import run_full_analysis # Importiert den Celery-Task
from celery.result import AsyncResult
from google.cloud import storage

app = Flask(__name__)
CORS(app)

# --- Google Cloud Konfiguration ---
BUCKET_NAME = 'ignition-ki-csv-data-2025-user123'
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "ignition-ki-csv-storage-e7bb9d0fd1d0.json"
storage_client = storage.Client()

@app.route('/start-analysis', methods=['POST'])
def start_analysis():
    """Startet den Analyse-Task und gibt sofort eine Task-ID zurück."""
    task = run_full_analysis.delay()
    return jsonify({"task_id": task.id}), 202

@app.route('/status/<task_id>', methods=['GET'])
def get_status(task_id):
    """Fragt den Status eines laufenden Tasks ab."""
    task_result = AsyncResult(task_id, app=run_full_analysis.app)

    response = {
        "task_id": task_id,
        "state": task_result.state,
        "info": {},
    }
    # Celery speichert das Ergebnis in 'result', wenn es erfolgreich ist
    if task_result.state == 'SUCCESS':
        response['info'] = task_result.result
    # Informationen während des Laufs werden in 'info' gespeichert
    elif task_result.state != 'FAILURE':
        response['info'] = task_result.info
    else: # Im Fehlerfall
        response['info'] = {'error': str(task_result.info)}

    return jsonify(response)

@app.route('/upload', methods=['POST'])
def upload_file():
    """Nimmt eine Datei vom Frontend entgegen und lädt sie in GCS hoch."""
    if 'file' not in request.files:
        return jsonify({"error": "Keine Datei im Request gefunden"}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "Kein Dateiname"}), 400

    try:
        bucket = storage_client.bucket(BUCKET_NAME)
        blob = bucket.blob(f"data/{file.filename}")

        blob.upload_from_file(file.stream, content_type=file.content_type)

        return jsonify({"message": f"Datei '{file.filename}' erfolgreich hochgeladen."}), 200
    except Exception as e:
        return jsonify({"error": f"Upload fehlgeschlagen: {str(e)}"}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)