{"cells":[{"cell_type":"code","source":"# project/strategy.py\nimport backtrader as bt\nimport numpy as np\nimport logging\n\n# Import from other project modules\nfrom .features import get_feature_columns\nfrom .config import Config\n\nlogger = logging.getLogger(__name__)\n\nclass PercolationBreakoutStrategy(bt.Strategy):\n    params = (\n        ('ignition_threshold', 0.75),\n    )\n\n    def __init__(self):\n        feature_map = {name: f'feature_{i}' for i, name in enumerate(get_feature_columns())}\n        self.is_consolidating = self.data.getdatabyname(feature_map['is_consolidating'])\n        self.ignition_score = self.data.getdatabyname(feature_map['ignition_score'])\n        self.atr = self.data.getdatabyname(feature_map['ATRr_14'])\n        self.bandwidth = self.data.getdatabyname(feature_map['bollinger_bandwidth'])\n        self.order = None\n        logger.info(\"PercolationBreakoutStrategy with Dynamic Targets initialized.\")\n\n    def notify_order(self, order):\n        if order.status in [order.Submitted, order.Accepted]: return\n        if order.status in [order.Completed, order.Canceled, order.Margin, order.Rejected]:\n            self.order = None\n\n    def next(self):\n        if self.order or self.position: return\n        \n        if self.is_consolidating[0] > 0.5 and self.ignition_score[0] > self.p.ignition_threshold:\n            current_price = self.data.close[0]\n            current_atr = self.atr[0]\n            consolidation_width = self.bandwidth[0]\n            if current_atr <= 0: return\n\n            stop_factor = np.clip(consolidation_width * 10, 1.5, 3.0)\n            take_profit_factor = np.clip(consolidation_width * 30, 3.0, 8.0)\n            \n            stop_price = current_price - stop_factor * current_atr\n            take_profit_price = current_price + take_profit_factor * current_atr\n            \n            risk_per_share = current_price - stop_price\n            if risk_per_share <= 0: return\n            \n            size = int((self.broker.get_cash() * Config.RISK_PER_TRADE) / risk_per_share)\n            if size > 0:\n                logger.info(f\"ENTRY SIGNAL: Ignition Score {self.ignition_score[0]:.2f}, \"\n                            f\"Stop Factor: {stop_factor:.2f}, TP Factor: {take_profit_factor:.2f}. \"\n                            f\"Buying {size} shares.\")\n                self.order = self.buy_bracket(\n                    size=size,\n                    price=current_price,\n                    stopprice=stop_price,\n                    limitprice=take_profit_price\n                )","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}