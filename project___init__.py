{"cells":[{"cell_type":"code","source":"# project/__init__.py\nimport logging\nimport os\n\n# Import from other project modules\nfrom .config import Config\n\n# ==============================================================================\n#                 Grundlegende Konfiguration für das Projekt-Paket\n# ==============================================================================\n# Diese Datei wird ausgeführt, sobald ein Modul aus dem 'project'-Paket importiert wird.\n# Sie dient dazu, das Verzeichnis als Python-Paket zu kennzeichnen und kann für\n# paketweite Initialisierungen wie das Logging verwendet werden.\n\n# --- Paketweites Logging-Setup ---\n# Konfiguriert das Logging für die gesamte Anwendung an zentraler Stelle.\n# Alle Logger, die in den einzelnen Modulen via `logging.getLogger(__name__)`\n# erstellt werden, erben diese Konfiguration.\nlogging.basicConfig(\n    level=Config.LOG_LEVEL,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    datefmt='%Y-%m-%d %H:%M:%S'\n)\n\n# Optional: Stummschalten von zu gesprächigen Bibliotheken\n# logging.getLogger(\"urllib3\").setLevel(logging.WARNING)\n\nlogger = logging.getLogger(__name__)\nlogger.info(\"Project package initialized and logging configured.\")\n\n# --- Verfügbarmachen von wichtigen Objekten auf Paketebene (optional) ---\n# Man kann hier auch die Flask-App oder die Celery-Instanz importieren,\n# um den Zugriff zu vereinfachen, aber das kann zu komplexeren Import-Strukturen führen.\n# Fürs Erste belassen wir es beim Logging.\n#\n# from .server import app, celery, socketio","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}