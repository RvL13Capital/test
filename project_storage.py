{"cells":[{"cell_type":"code","source":"# project/storage.py\nimport io\nimport joblib\nimport torch\nimport logging\nfrom google.cloud import storage\nfrom google.cloud.exceptions import NotFound\n\n# Import from other project modules\nfrom .config import Config\n\nlogger = logging.getLogger(__name__)\n\nclass GCSModelStorage:\n    def __init__(self, bucket_name, project_id=None):\n        self.bucket_name = bucket_name\n        try:\n            self.client = storage.Client(project=project_id)\n            self.bucket = self.client.get_bucket(bucket_name)\n            logger.info(f\"Successfully connected to GCS bucket '{bucket_name}'.\")\n        except Exception as e:\n            logger.error(f\"Failed to connect to GCS bucket '{bucket_name}': {e}\")\n            self.client = None; self.bucket = None\n\n    def _upload_to_gcs(self, buffer, gcs_path, content_type):\n        if not self.bucket: raise ConnectionError(\"GCS bucket is not initialized.\")\n        try:\n            blob = self.bucket.blob(gcs_path)\n            blob.upload_from_file(buffer, content_type=content_type)\n            logger.info(f\"Successfully uploaded object to gs://{self.bucket_name}/{gcs_path}\")\n            return f\"gs://{self.bucket_name}/{gcs_path}\"\n        except Exception as e:\n            logger.error(f\"Failed to upload to {gcs_path}: {e}\"); raise\n\n    def _download_from_gcs(self, gcs_path):\n        if not self.bucket: raise ConnectionError(\"GCS bucket is not initialized.\")\n        try:\n            blob = self.bucket.blob(gcs_path)\n            if not blob.exists(): raise NotFound(f\"GCS object not found: {gcs_path}\")\n            buffer = io.BytesIO()\n            blob.download_to_file(buffer)\n            buffer.seek(0)\n            return buffer\n        except Exception as e:\n            logger.error(f\"Failed to download from {gcs_path}: {e}\"); raise\n\n    def upload_joblib(self, model_object, gcs_path):\n        buffer = io.BytesIO(); joblib.dump(model_object, buffer); buffer.seek(0)\n        return self._upload_to_gcs(buffer, gcs_path, 'application/octet-stream')\n\n    def download_joblib(self, gcs_path):\n        return joblib.load(self._download_from_gcs(gcs_path))\n\n    def upload_pytorch_model(self, model_state_dict, gcs_path):\n        buffer = io.BytesIO(); torch.save(model_state_dict, buffer); buffer.seek(0)\n        return self._upload_to_gcs(buffer, gcs_path, 'application/octet-stream')\n        \n    def download_pytorch_model(self, gcs_path, device):\n        return torch.load(self._download_from_gcs(gcs_path), map_location=device)\n\n_gcs_storage_client = None\ndef get_gcs_storage():\n    global _gcs_storage_client\n    if _gcs_storage_client is None:\n        _gcs_storage_client = GCSModelStorage(Config.GCS_BUCKET_NAME, Config.GCS_PROJECT_ID)\n    return _gcs_storage_client","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}